// Generated by CoffeeScript 2.1.1
  // lib.cs.misc - Check the status of code repositories under a root directory.
  // Copyright (C) 2016 Dario Giovannetti <dev@dariogiovannetti.net>

  // This file is part of lib.cs.misc.

  // lib.cs.misc is free software: you can redistribute it and/or modify
  // it under the terms of the GNU General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // lib.cs.misc is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU General Public License for more details.

  // You should have received a copy of the GNU General Public License
  // along with lib.cs.misc.  If not, see <http://www.gnu.org/licenses/>.
var h, misc,
  indexOf = [].indexOf;

if ((typeof $ === "undefined" || $ === null) && (typeof jQuery === "undefined" || jQuery === null)) {
  window.$ = window.jQuery = require('jquery');
}

h = require('hyperscript');

misc = require('./misc');

module.exports.Choice = function(options, selected, props) {
  var i, len, opt, option, select, text, val;
  select = h('select', props);
  for (i = 0, len = options.length; i < len; i++) {
    opt = options[i];
    if (Array.isArray(opt)) {
      [text, val] = opt;
    } else {
      text = val = opt;
    }
    option = h('option', {
      value: val
    }, text);
    if (val === selected) {
      option.selected = true;
    }
    select.appendChild(option);
  }
  return select;
};

module.exports.Multichoice = function(legend, items, checked, attributes) {
  var fieldset, i, input, item, len;
  fieldset = $('<fieldset>').append($('<legend>').text(legend)).attr(attributes);
  for (i = 0, len = items.length; i < len; i++) {
    item = items[i];
    input = $('<input>').val(item).attr({
      'type': 'checkbox'
    }).attr(attributes);
    if (indexOf.call(checked, item) >= 0) {
      input.attr('checked', '');
    }
    fieldset.append($('<div>').append(item, input));
  }
  return fieldset;
};

module.exports.WeekDaySelector = class WeekDaySelector {
  constructor(selected_days, baseid, radio = false) {
    var i, id, index, input, len, name, ref, wday;
    this.container = $('<span>').addClass('weekdayselector');
    ref = misc.WEEKDAYS_SHORT;
    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      wday = ref[index];
      id = `${baseid}-${index}`;
      name = `${baseid}`;
      input = $('<input>').attr({
        'type': radio ? 'radio' : 'checkbox',
        'name': name,
        'id': id
      }).val(index).appendTo(this.container);
      if (selected_days.indexOf(index) > -1) {
        input.prop("checked", true);
      }
      $('<label>').attr('for', id).text(wday).appendTo(this.container);
    }
  }

  get_days() {
    var days, i, input, len, ref;
    days = [];
    ref = this.container.children('input');
    for (i = 0, len = ref.length; i < len; i++) {
      input = ref[i];
      if (input.checked) {
        days.push(input.value);
      }
    }
    return days;
  }

};
