// Generated by CoffeeScript 2.1.1
// lib.cs.misc - Check the status of code repositories under a root directory.
// Copyright (C) 2016 Dario Giovannetti <dev@dariogiovannetti.net>

// This file is part of lib.cs.misc.

// lib.cs.misc is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// lib.cs.misc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with lib.cs.misc.  If not, see <http://www.gnu.org/licenses/>.
var BootstrapDatePickerAltDisplay;

if ((typeof $ === "undefined" || $ === null) && (typeof jQuery === "undefined" || jQuery === null)) {
  window.$ = window.jQuery = require('jquery');
}

if (($().modal == null) && (jQuery().modal == null)) {
  require('bootstrap');
}

if (($().datepicker == null) && !jQuery().datepicker) {
  require('bootstrap-datepicker');
}

BootstrapDatePickerAltDisplay = class BootstrapDatePickerAltDisplay {
  constructor(config = {}, dpconfig = {}) {
    var ref, ref1;
    if (config.format_date == null) {
      config.format_date = (widget) => {
        return widget.get_date();
      };
    }
    // Simply setting it as type="hidden" would show the popup in the
    // top-left corner of the screen
    this.picker = $('<input>').css({
      width: 0,
      height: 0,
      margin: 0,
      padding: 0,
      border: 'none'
    }).datepicker(dpconfig).change(() => {
      return this.display.val(config.format_date(this));
    });
    this.display = $('<input>').attr({
      'type': 'text',
      // TODO: Support readonly=false, but the user should provide a
      //       should be a reverse format_date function (parse_date)
      'readonly': (ref = config.readonly) != null ? ref : true,
      'placeholder': (ref1 = config.placeholder) != null ? ref1 : 'Select a date'
    }).addClass('datepicker-display').click(() => {
      return this.picker.datepicker('show');
    });
    if (config.name != null) {
      this.picker.attr('name', config.name);
    }
    if (config.size != null) {
      this.display.attr('size', config.size);
    }
    if (config.class != null) {
      this.display.addClass(config.class);
    }
    // This block triggers 'change' on the picker, execute after configuring
    // everything
    if (config.initial_value != null) {
      this.set_date(config.initial_value);
      this.picker.trigger('change');
    }
  }

  get_date() {
    return this.picker.datepicker('getDate');
  }

  set_date(date) {
    if (typeof date === 'string') {
      date = new Date(date);
    }
    return this.picker.datepicker('setDate', date);
  }

};

$.fn.bootstrapDatepickerAltDisplay = function(...args) {
  return this.each(function() {
    var config, dpconfig, ref, ref1, widget;
    if (typeof args[0] === 'string') {
      widget = $(this).data('widget');
      // BUG: This is broken because the main
      //      bootstrapDatepickerAltDisplay method returns @each
      return widget.picker.datepicker(...args);
    }
    config = (ref = args[0]) != null ? ref : {};
    dpconfig = (ref1 = args[1]) != null ? ref1 : {};
    widget = new BootstrapDatePickerAltDisplay(config, dpconfig);
    // Append the picker before the display, so that the popup appears
    // on the left
    return $(this).data('widget', widget).append(widget.picker, widget.display);
  });
};
