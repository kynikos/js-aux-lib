// Generated by CoffeeScript 1.10.0
if (typeof GM_xmlhttpRequest === "undefined" || GM_xmlhttpRequest === null) {
  window.GM_xmlhttpRequest = function() {
    var header, req;
    if (params.method == null) {
      params.method = "GET";
    }
    if (params.data == null) {
      params.data = null;
    }
    if (params.headers == null) {
      params.headers = {};
    }
    if (params.user == null) {
      params.user = null;
    }
    if (params.password == null) {
      params.password = null;
    }
    if (params.onload == null) {
      params.onload = function(req) {};
    }
    if (params.onerror == null) {
      params.onerror = function(req) {};
    }
    if (params.onreadystatechange == null) {
      params.onreadystatechange = function(req) {};
    }
    params.async = true;
    req = new XMLHttpRequest();
    req.open(params.method, params.url, params.async, params.user, params.password);
    for (header in params.headers) {
      req.setRequestHeader(header, params.headers[header]);
    }
    req.onreadystatechange = function() {
      var err, error, response;
      response = {
        responseText: req.responseText,
        readyState: req.readyState,
        responseHeaders: req.getAllResponseHeaders(),
        status: req.status,
        statusText: req.statusText
      };
      try {
        response.responseJSON = JSON.parse(req.responseText);
      } catch (error) {
        err = error;
        response.responseJSON = void 0;
      }
      params.onreadystatechange(response);
      if (req.readyState === 4) {
        if (req.status === 200) {
          return params.onload(response);
        } else {
          return params.onerror(response);
        }
      }
    };
    req.send(params.data);
    return {
      abort: function() {
        return req.abort();
      }
    };
  };
}
