"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.1.1
// lib.cs.misc - Check the status of code repositories under a root directory.
// Copyright (C) 2016 Dario Giovannetti <dev@dariogiovannetti.net>

// This file is part of lib.cs.misc.

// lib.cs.misc is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// lib.cs.misc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with lib.cs.misc.  If not, see <http://www.gnu.org/licenses/>.
var TableSettings, TableSettingsNoSpan, TableSettingsRowspan;

if ((typeof $ === "undefined" || $ === null) && (typeof jQuery === "undefined" || jQuery === null)) {
  window.$ = window.jQuery = require('jquery');
}

TableSettings = function TableSettings(table) {
  _classCallCheck(this, TableSettings);

  var _hideSettings, self, _showSettings;
  this.table = table;
  self = this;
  _showSettings = function showSettings(event) {
    var form, settings;
    settings = $(this).closest('div.settings');
    form = settings.children('form');
    if (form.length) {
      form.show();
    } else {
      form = $('<form>').appendTo(settings);
      self.table.find('th').each(function (index) {
        var th;
        th = $(this);
        return form.append($('<label>').text(th.text()).prepend($('<input type="checkbox">').prop('checked', true).change(function () {
          if ($(this)[0].checked) {
            return self._showField(index);
          } else {
            return self._hideField(index);
          }
        }))).append('<br>');
      });
    }
    $(this).off('click', _showSettings).on('click', _hideSettings);
    return false;
  };
  _hideSettings = function hideSettings(event) {
    // Only hide the form, don't remove it, or the checkboxes will
    // have to be reinitialized to a checked/unchecked status based on
    // the visibility of each field every time the settings are shown
    // again
    $(this).closest('div.settings').children('form').hide();
    $(this).off('click', _hideSettings).on('click', _showSettings);
    return false;
  };
  $('<div>').addClass('settings').append($('<a>').attr('href', '#').text('Settings').click(_showSettings)).insertBefore(this.table);
};

TableSettingsNoSpan = function (_TableSettings) {
  _inherits(TableSettingsNoSpan, _TableSettings);

  function TableSettingsNoSpan() {
    _classCallCheck(this, TableSettingsNoSpan);

    return _possibleConstructorReturn(this, (TableSettingsNoSpan.__proto__ || Object.getPrototypeOf(TableSettingsNoSpan)).apply(this, arguments));
  }

  _createClass(TableSettingsNoSpan, [{
    key: "_showField",
    value: function _showField(index) {
      var filter;
      filter = ':nth-of-type(' + (index + 1) + ')';
      return this.table.find('th' + filter + ', td' + filter).show();
    }
  }, {
    key: "_hideField",
    value: function _hideField(index) {
      var filter;
      filter = ':nth-of-type(' + (index + 1) + ')';
      return this.table.find('th' + filter + ', td' + filter).hide();
    }
  }]);

  return TableSettingsNoSpan;
}(TableSettings);

TableSettingsRowspan = function (_TableSettings2) {
  _inherits(TableSettingsRowspan, _TableSettings2);

  function TableSettingsRowspan() {
    _classCallCheck(this, TableSettingsRowspan);

    return _possibleConstructorReturn(this, (TableSettingsRowspan.__proto__ || Object.getPrototypeOf(TableSettingsRowspan)).apply(this, arguments));
  }

  _createClass(TableSettingsRowspan, [{
    key: "_showField",
    value: function _showField(index) {
      return this.table.find('.col' + index).show();
    }
  }, {
    key: "_hideField",
    value: function _hideField(index) {
      return this.table.find('.col' + index).hide();
    }
  }]);

  return TableSettingsRowspan;
}(TableSettings);

$.fn.addTableSettings = function () {
  return this.each(function () {
    if ($(this).hasClass('hideable-fields-nospan')) {
      new TableSettingsNoSpan($(this));
    } else if ($(this).hasClass('hideable-fields-rowspan')) {
      new TableSettingsRowspan($(this));
    }
    return $(this);
  });
};

$.fn.prependTableDataRows = function () {
  for (var _len = arguments.length, rows = Array(_len), _key = 0; _key < _len; _key++) {
    rows[_key] = arguments[_key];
  }

  return this.each(function () {
    var cell, i, j, len, len1, row, tr;
    // TODO: Check if this is a table, thead, tbody or tfoot?
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      tr = $('<tr>');
      for (j = 0, len1 = row.length; j < len1; j++) {
        cell = row[j];
        tr.append($('<td>').append(cell));
      }
      $(this).prepend(tr);
    }
    return $(this);
  });
};

$.fn.appendTableDataRows = function () {
  for (var _len2 = arguments.length, rows = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    rows[_key2] = arguments[_key2];
  }

  return this.each(function () {
    var cell, i, j, len, len1, row, tr;
    // TODO: Check if this is a table, thead, tbody or tfoot?
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      tr = $('<tr>');
      for (j = 0, len1 = row.length; j < len1; j++) {
        cell = row[j];
        tr.append($('<td>').append(cell));
      }
      $(this).append(tr);
    }
    return $(this);
  });
};