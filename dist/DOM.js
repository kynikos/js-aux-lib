// Generated by CoffeeScript 1.10.0
module.exports.getPreviousElementSibling = function(node) {
  while (node.previousSibling.nodeType !== 1) {
    node = node.previousSibling;
  }
  return node.previousSibling;
};

module.exports.getNextElementSibling = function(node) {
  while (node.nextSibling.nodeType !== 1) {
    node = node.nextSibling;
  }
  return node.nextSibling;
};

module.exports.getFirstElementChild = function(node) {
  if (node.firstChild.nodeType === 1) {
    return node.firstChild;
  } else {
    return module.exports.getNextElementSibling(node.firstChild);
  }
};

module.exports.getLastElementChild = function(node) {
  if (node.lastChild.nodeType === 1) {
    return node.lastChild;
  } else {
    return module.exports.getPreviousElementSibling(node.lastChild);
  }
};

module.exports.getChildElements = function(node) {
  var child, children, j, len, list;
  list = element.childNodes;
  children = [];
  for (j = 0, len = list.length; j < len; j++) {
    child = list[j];
    if (child.nodeType === 1) {
      children.push(child);
    }
  }
  return children;
};

module.exports.getChildrenByTagName = function(element, tag) {
  var child, children, j, len, list, localName;
  list = element.childNodes;
  children = [];
  for (j = 0, len = list.length; j < len; j++) {
    child = list[j];
    localName = child.localName;
    if (localName && localName.toLowerCase() === tag.toLowerCase()) {
      children.push(child);
    }
  }
  return children;
};

module.exports.isDescendantOf = function(descendant, ancestor, identity) {
  var response;
  response = false;
  if (identity && descendant.isSameNode(ancestor)) {
    response = true;
  } else {
    while (descendant !== document.body) {
      if (descendant.parentNode.isSameNode(ancestor)) {
        response = true;
        break;
      }
      descendant = descendant.parentNode;
    }
  }
  return response;
};

module.exports.getSiblingPositionByTagName = function(element) {
  var i, siblings;
  i = 0;
  siblings = module.exports.getChildrenByTagName(element.parentNode, element.localName);
  while (!siblings[i].isSameNode(element)) {
    i++;
  }
  if (i < siblings.length) {
    return i;
  } else {
    return -1;
  }
};

module.exports.getLongTextNode = function(element) {
  var child, j, len, nodes, text;
  text = "";
  nodes = element.childNodes;
  for (j = 0, len = nodes.length; j < len; j++) {
    child = nodes[j];
    if (child.nodeType === 3) {
      text += child.nodeValue;
    }
  }
  return text;
};

module.exports.waitUntilJQuerySelectorMatches = function(selector, handler, args, interval) {
  var $, recurse;
  $ = require('jquery');
  recurse = function() {
    if ($(selector)[0]) {
      return handler(args);
    } else {
      return setTimeout(recurse, interval);
    }
  };
  return recurse();
};
