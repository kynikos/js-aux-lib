// Generated by CoffeeScript 1.10.0
module.exports.executeAsync = function(functions, id) {
  var callContinue, fid;
  id++;
  if (functions[id]) {
    fid = functions[id];
    callContinue = (function(_this) {
      return function() {
        return _this.executeAsync(functions, id);
      };
    })(this);
    return fid[0](fid[1], callContinue);
  }
};

module.exports.recurseTreeAsync = function(params) {
  if (params.stage === void 0) {
    params.parentIndex = null;
    params.siblingIndex = 0;
    params.ancestors = [];
    params.children = [];
    params.nodesList = [];
    params.stage = 1;
    return this.recurseTreeAsync(params);
  } else {
    return 
        switch (params.stage) {
            case 1:
                params.stage = 2;
                // Prevent infinite loops
                if (params.ancestors.indexOf(params.node) == -1) {
                    params.callChildren(params);
                    break;
                }
                else {
                    params.children = "loop";
                    // Do not break here!!!
                }
            case 2:
                params.nodesList.push({
                    node: params.node,
                    parentIndex: params.parentIndex,
                    siblingIndex: params.siblingIndex,
                    ancestors: params.ancestors.slice(0),
                    children: params.children.slice(0),
                });
                params.stage = 3;
                params.callNode(params);
                break;
            case 3:
                if (params.children.length && params.children != "loop") {
                    // Go to the first child
                    params.ancestors.push(params.node);
                    params.node = params.children[0];
                    params.parentIndex = params.nodesList.length - 1;
                    params.siblingIndex = 0;
                    params.children = [];
                    params.stage = 1;
                    this.recurseTreeAsync(params);
                }
                else if (params.parentIndex != null) {
                    // Go to the next sibling
                    var parent = params.nodesList[params.parentIndex];
                    params.siblingIndex++;
                    params.node = parent.children[params.siblingIndex];
                    params.children = [];
                    if (params.node) {
                        params.stage = 1;
                    }
                    else {
                        // There are no more siblings
                        params.node = parent.node;
                        params.parentIndex = parent.parentIndex;
                        params.siblingIndex = parent.siblingIndex;
                        params.ancestors = parent.ancestors.slice(0);
                        params.stage = 3;
                    }
                    this.recurseTreeAsync(params);
                }
                else {
                    // End of recursion
                    params.callEnd(params);
                }
                break;
        }
        ;
  }
};
